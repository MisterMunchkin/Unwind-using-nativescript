"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Common = require("./gif.common");
var fs = require("file-system");
var gif_common_1 = require("./gif.common");
var style_properties_1 = require("ui/styling/style-properties");
global.moduleMerge(Common, exports);
var Gif = (function (_super) {
    __extends(Gif, _super);
    function Gif() {
        var _this = _super.call(this) || this;
        _this.nativeView = FLAnimatedImageView.alloc().initWithFrame(CGRectMake(0, 0, 100, 100));
        _this.nativeView.clipsToBounds = true;
        _this._headers = null;
        _this._src = null;
        return _this;
    }
    Gif.prototype[gif_common_1.headersProperty.setNative] = function (value) {
        this._setHeader(value ? value : null);
    };
    Gif.prototype[gif_common_1.srcProperty.setNative] = function (value) {
        this._setSrcProperty(value);
    };
    Gif.prototype._setSrcProperty = function (value) {
        if (value) {
            var isUrl = false;
            if (value.indexOf("://") !== -1) {
                if (value.indexOf('res://') === -1) {
                    isUrl = true;
                }
            }
            this._src = value;
            if (!isUrl) {
                var currentPath = fs.knownFolders.currentApp().path;
                if (value[1] === '/' && (value[0] === '.' || value[0] === '~')) {
                    value = value.substr(2);
                }
                if (value[0] !== '/') {
                    value = currentPath + '/' + value;
                }
                this._animatedImage = FLAnimatedImage.animatedImageWithGIFData(NSData.dataWithContentsOfFile(NSString.stringWithString(value)));
                this._setImage();
            }
            else {
                if (this._headers) {
                    this._useAnimatedImageFromUrl(value, this._headers);
                }
                else {
                    this._useAnimatedImageFromUrl(value);
                }
            }
        }
        else {
            console.log("No src value detected.");
        }
    };
    Gif.prototype.stop = function () {
        this.nativeView.stopAnimating();
    };
    Gif.prototype.start = function () {
        this.nativeView.startAnimating();
    };
    Gif.prototype.isPlaying = function () {
        var isPlaying = this.nativeView.animatedImage.isAnimating();
        return isPlaying;
    };
    Gif.prototype.getFrameCount = function () {
        var frames = this.nativeView.animatedImage.frameCount;
        return frames;
    };
    Gif.prototype._useAnimatedImageFromUrl = function (url, headers) {
        var _this = this;
        if (headers) {
            var nsUrl = NSURL.URLWithString(url);
            var request = NSMutableURLRequest.requestWithURL(nsUrl);
            for (var property in headers) {
                if (headers.hasOwnProperty(property)) {
                    console.log('headers: ' + property + ', value: ' + headers[property]);
                    request.addValueForHTTPHeaderField(headers[property], property);
                }
            }
            request.HTTPMethod = "GET";
            var session = NSURLSession.sharedSession;
            var task = session.dataTaskWithRequestCompletionHandler(request, function (data, response, err) {
                if (err) {
                    console.log('Error loading Gif: ' + err.localizedDescription);
                }
                else {
                    _this._animatedImage = FLAnimatedImage.animatedImageWithGIFData(data);
                    _this._setImage();
                }
            });
            task.resume();
            "";
        }
        else {
            this._animatedImage = FLAnimatedImage.animatedImageWithGIFData(NSData.dataWithContentsOfURL(NSURL.URLWithString(url)));
            this._setImage();
        }
    };
    Gif.prototype._setImage = function () {
        try {
            this.nativeView.animatedImage = this._animatedImage;
            this.nativeView.frame = CGRectMake(0, 0, 100, 100);
        }
        catch (ex) {
            console.log(ex);
        }
        if (isNaN(style_properties_1.PercentLength.toDevicePixels(this.width)) || isNaN(style_properties_1.PercentLength.toDevicePixels(this.height))) {
            this.requestLayout();
        }
    };
    Gif.prototype._setHeader = function (headers) {
        if (headers) {
            this._headers = headers;
            if (this._src && this._src.length > 0) {
                this._setSrcProperty(this._src);
            }
        }
        else {
            this._headers = null;
        }
    };
    return Gif;
}(Common.Gif));
exports.Gif = Gif;
